from game_sound_py.game_over import tocar_game
from game_sound_py.game_over import parar_game
from rich import print
from rich import print as rprint
from rich.panel import Panel
from rich.table import Table
from rich.console import Console
from rich.columns import Columns
from rich.text import Text
from rich import box
import random
import time

console = Console()

def exibir_status_combate(player, inimigos):
    """Exibe o status de combate formatado com pain√©is visuais"""
    console = Console()
    
    # Painel do Jogador
    player_table = Table(show_header=False, box=None, padding=(0,1))
    player_table.add_column(style="cyan", justify="right", width=15)
    player_table.add_column(style="white", width=20)
    
    player_table.add_row("Jogador", f"[bold]{player['nome']}[/]")
    player_table.add_row("Classe", f"[magenta]{player['classe']}[/]")
    player_table.add_row("N√≠vel", f"[yellow]{player['nivel']}[/]")
    player_table.add_row("Vida", f"[red]{player['vida']}[/]")
    player_table.add_row("For√ßa", f"[orange1]{player['for√ßa']}[/]")
    if 'magia' in player:
        player_table.add_row("Magia", f"[blue]{player['magia']}[/]")
    player_table.add_row("Defesa", f"[green]{player['defesa']}[/]")
    
    player_panel = Panel.fit(
        player_table,
        title="[bold cyan]Status do Her√≥i[/]",
        border_style="bright_blue",
        padding=(1, 2),
        subtitle=f"[dim]XP: {player['xp']}/{player['xp_proximo_nivel']}[/dim]"
    )

    # Painel de Inimigos
    enemies_table = Table(box=box.ROUNDED, header_style="bold red")
    enemies_table.add_column("#", style="cyan", width=3)
    enemies_table.add_column("Nome", style="red", width=20)
    enemies_table.add_column("N√≠vel", style="yellow", width=5)
    enemies_table.add_column("Vida", style="bright_red", width=8)
    enemies_table.add_column("Defesa", style="blue", width=8)
    enemies_table.add_column("Classe", style="magenta", width=15)
    
    for i, inimigo in enumerate(inimigos, 1):
        enemies_table.add_row(
            str(i),
            inimigo["nome"],
            str(inimigo["nivel"]),
            str(inimigo["vida"]),
            str(inimigo.get("defesa", 0)),
            inimigo["classe"]
        )
    
    enemies_panel = Panel.fit(
        enemies_table,
        title="[bold red]Inimigos Enfrentados[/]",
        border_style="bright_red",
        padding=(1, 1)
    )

    # Layout Principal
    console.print(Columns([player_panel, enemies_panel], expand=False))

def habilidade_especial(player, inimigos):

    player = verificar_status_monarca(player)
    derrotados = []
    rprint(f"\n[bold]{player['nome']}[/] usa [yellow]{player['habilidade']}[/]!")
    
    if player["classe"] == "Mago":
        dano = player["magia"] + random.randint(10, 20)
        for inimigo in inimigos[:]:
            inimigo["vida"] -= dano
            print(f"Voc√™ lan√ßou uma [bold yellow]Bola de Fogo[/bold yellow] em {inimigo['nome']} e causou [bold red]{dano}[/bold red] de dano")
            if inimigo["vida"] <= 0:
                print(f"{inimigo['nome']} foi derrotado!")
                derrotados.append(inimigo)
                inimigos.remove(inimigo)

    elif player["classe"] == "Paladino":
        player["vida"] += 20
        print("Voc√™ usou Ben√ß√£o divina e recuperou 20 de vida")

    elif player["classe"] == "Arqueiro":
        dano = player["for√ßa"] + random.randint(10, 20)
        for inimigo in inimigos[:]:
            inimigo["vida"] -= dano
            print(f"Voc√™ usou [bold yellow]Tiro Certeiro[/bold yellow] em {inimigo['nome']} e causou [bold red]{dano}[/bold red] de dano")
            if inimigo["vida"] <= 0:
                print(f"{inimigo['nome']} foi derrotado!")
                derrotados.append(inimigo)
                inimigos.remove(inimigo)

    elif player["classe"] == "Guerreiro":
        dano = player["for√ßa"] + random.randint(10, 20)
        for inimigo in inimigos[:]:
            inimigo["vida"] -= dano
            print(f"Voc√™ usou [bold yellow]Decapita√ß√£o[/bold yellow] em {inimigo['nome']} e causou [bold red]{dano}[/bold red] de dano")
            if inimigo["vida"] <= 0:
                print(f"{inimigo['nome']} foi derrotado!")
                derrotados.append(inimigo)
                inimigos.remove(inimigo)

    elif player["classe"] == "Dev_admin":
        dano = player["for√ßa"] + random.randint(20, 40)
        for inimigo in inimigos[:]:
            inimigo["vida"] -= dano
            print(f"Voc√™ usou o [bold yellow]Bug do Dev[/bold yellow] em {inimigo['nome']} e causou [bold red]{dano}[/bold red] de dano")
            if inimigo["vida"] <= 0:
                print(f"{inimigo['nome']} foi derrotado!")
                derrotados.append(inimigo)
                inimigos.remove(inimigo)
                
    elif player["classe"] == "Monarca das Sombras":
        if "for√ßa_original" not in player:
            player["for√ßa_original"] = player["for√ßa"]
            player["vida_original"] = player["vida"]
        player["for√ßa"] += 30
        player["vida"] += 20
        print("\nVoc√™ invocou o Dom√≠nio das Sombras!")
        rprint(f"| For√ßa aumentada para [red]{player['for√ßa']}[/] (+30)")
        rprint(f"| Vida aumentada para [green]{player['vida']}[/] (+20)")
        rprint("| Todos os inimigos sofrem [purple]10[/] de dano sombrio!")
        
        # Dano adicional para o Monarca
        for inimigo in inimigos[:]:
            inimigo["vida"] -= 10
            rprint(f"{inimigo['nome']} sofreu [purple]10[/] de dano das sombras!")
            if inimigo["vida"] <= 0:
                rprint(f"{inimigo['nome']} foi [bold purple]consumido pelas sombras[/]!")
                inimigos.remove(inimigo)
        
        return []
    
    return derrotados

def ganhar_xp(player, xp_ganho):
    """Exibe bonifica√ß√£o de XP e subida de n√≠vel com rich"""
    if player.get("monarca_sombra", False):
        # Progress√£o do Monarca das Sombras
        player["xp"] += xp_ganho
        
        # Painel de ganho de XP
        console.print(Panel.fit(
            f"[bold purple]{player['nome']}[/] absorveu [dark_red]{xp_ganho}[/] pontos de [black]ess√™ncia sombria[/]!",
            style="purple"
        ))
        
        while player["xp"] >= player["xp_proximo_nivel"]:
            player["xp"] -= player["xp_proximo_nivel"]
            player["nivel"] += 1
            player["xp_proximo_nivel"] = int(player["xp_proximo_nivel"] * 1.5)
            
            # Tabela de atributos do Monarca
            atributos_table = Table.grid(padding=(0, 2))
            atributos_table.add_column(style="cyan", justify="right")
            atributos_table.add_column(style="white")
            
            atributos_table.add_row("Vida", f"{player['vida']} ‚Üí [green]{player['vida'] + 10}[/] (+10)")
            player["vida"] += 10
            
            atributos_table.add_row("For√ßa", f"{player['for√ßa']} ‚Üí [red]{player['for√ßa'] + 5}[/] (+5)")
            player["for√ßa"] += 5
            
            atributos_table.add_row("Magia", f"{player['magia']} ‚Üí [blue]{player['magia'] + 4}[/] (+4)")
            player["magia"] += 4
            
            atributos_table.add_row("Defesa", f"{player['defesa']} ‚Üí [yellow]{player['defesa'] + 6}[/] (+6)")
            player["defesa"] += 6
            
            console.print(Panel.fit(
                f"[bold purple]üåë {player['nome']}[/] ascendeu para o [black]N√≠vel {player['nivel']}[/]!\n"
                "As [purple]sombras[/] lhe concederam:",
                box=box.DOUBLE,
                style="purple"
            ))
            console.print(atributos_table)
            console.print()
            
    else:
        # Progress√£o normal para outras classes
        player["xp"] += xp_ganho
        
        console.print(Panel.fit(
            f"[bold green]{player['nome']}[/] ganhou [yellow]{xp_ganho}[/] de [green]experi√™ncia[/]!",
            style="green"
        ))
        
        while player["xp"] >= player["xp_proximo_nivel"]:
            player["xp"] -= player["xp_proximo_nivel"]
            player["nivel"] += 1
            player["xp_proximo_nivel"] = int(player["xp_proximo_nivel"] * 1.5)
            
            # Calcula os b√¥nus de atributo
            bonus = {
                "vida": 10,
                "for√ßa": 4,
                "defesa": 3,
                "magia": 4 if player["classe"] in ["Mago", "Paladino"] else 0
            }
            
            if player["classe"] == "Dev_admin":
                bonus["for√ßa"] = 10
            
            # Tabela de atributos
            atributos_table = Table.grid(padding=(0, 2))
            atributos_table.add_column(style="cyan", justify="right")
            atributos_table.add_column(style="white")
            
            for attr, value in bonus.items():
                if value > 0:
                    old_val = player[attr]
                    player[attr] += value
                    atributos_table.add_row(
                        attr.capitalize(),
                        f"{old_val} ‚Üí [green]{player[attr]}[/] ([green]+{value}[/])"
                    )
            
            # Painel de subida de n√≠vel
            console.print(Panel.fit(
                f"[bold green]‚Üë {player['nome']}[/] subiu para o [yellow]N√≠vel {player['nivel']}[/]!\n"
                "Seus atributos aumentaram:",
                box=box.ROUNDED,
                style="green"
            ))
            console.print(atributos_table)
            console.print()

def verificar_status_monarca(player):
    if player.get("monarca_sombra", False) and player["classe"] != "Monarca das Sombras":
        player["classe"] = "Monarca das Sombras"
        if player["habilidade"] != "Dom√≠nio das Sombras":
            player["habilidade"] = "Dom√≠nio das Sombras"
            print("\nAs sombras corrigiram seu status...")
            rprint("| ¬ª Habilidade atualizada para: [bold purple]Dom√≠nio das Sombras[/]")
    return player

def combate(player, inimigos):
    player["habilidade_usada"] = False

    rprint(Panel.fit("[bold red]COMBATE INICIADO![/]", style="red"))
    time.sleep(2)

    derrotados = []
    turno_perdido = False

    # Inicializa√ß√£o do Monarca das Sombras
    if player["classe"] == "Monarca das Sombras" and "for√ßa_original" not in player:
        player["for√ßa_original"] = player["for√ßa"]
        player["vida_original"] = player["vida"]

    while inimigos and player["vida"] > 0:
        # Se o jogador perdeu o turno anterior
        if turno_perdido:
            turno_perdido = False
            monstro = random.choice(inimigos)
            dano_monstro = max(1, monstro["for√ßa"] - (player["defesa"] // 2))  # Garante pelo menos 1 de dano
            player["vida"] -= dano_monstro
            print(f"\n{monstro['nome']} aproveitou sua hesita√ß√£o e atacou causando {dano_monstro} de dano!")
            if player["vida"] <= 0:
                tocar_game()
                print("\nVoc√™ foi derrotado! Game over!")
                input("\nPressione ENTER para continuar\n")
                parar_game()
                return False
            continue

        # Exibe status
        exibir_status_combate(player, inimigos)

        # Menu de a√ß√µes
        rprint(Panel.fit("[bold]Escolha sua a√ß√£o:[/]\n"
                        "1. [red]Atacar[/]\n"
                        "2. [blue]Usar item[/]\n"
                        "3. [yellow]Habilidade especial[/]"))
        
        acao = input("Sua escolha: ").strip()

        # Processa a√ß√£o
        if acao == "1":
            if not inimigos:
                rprint("[yellow]N√£o h√° inimigos para atacar.[/]")
                turno_perdido = True
                continue
            
            try:
                escolha = int(input("Escolha o inimigo para atacar (n√∫mero): ").strip()) - 1
                if escolha < 0 or escolha >= len(inimigos):
                    rprint("[red]Inimigo inv√°lido![/]")
                    turno_perdido = True
                    continue
                    
                inimigo = inimigos[escolha]

                precisao_base = 90 # Precis√£o de ataque do player 10%
                precisao_final = precisao_base # habilidades/status

                if random.randint(1, 100) > precisao_final:
                    rprint(f"\n[bold yellow]Voc√™ errou o ataque contra {inimigo['nome']}![/]\n")
                    turno_perdido = True # Perde o turno ao errar
                    continue
                else:
                    # CALCULO DE DANO
                    dano_base = max(1, player["for√ßa"] - random.randint(0, 2))  # Dano base com pequena varia√ß√£o
                    dano_final = max(1, dano_base - (inimigo.get("defesa", 0) // 2))  # Reduz dano pela metade da defesa

                    inimigo["vida"] -= dano_final
                    rprint(f"\nVoc√™ atacou [red]{inimigo['nome']}[/] causando [bold red]{dano_final}[/] de dano!")
                    rprint(f"(Dano base: {dano_base} | Defesa do inimigo reduziu: {inimigo.get('defesa', 0)//2})")

                    if inimigo["vida"] <= 0:
                        rprint(f"[bold]{inimigo['nome']}[/] foi [red]derrotado[/]!")
                        derrotados.append(inimigo)
                        inimigos.remove(inimigo)

            except ValueError:
                rprint("[red]Digite um n√∫mero v√°lido![/]")
                turno_perdido = True
                continue

        elif acao == "2":
            # L√≥gica de itens
            rprint(Panel.fit("[bold]Seus itens:[/]\n" + 
                          "\n".join(f"- {nome_item} (x{qtd})" for nome_item, qtd in player["itens"].items())))
            
            item_input = input("Escolha o item para usar: ").strip().casefold()

            item_encontrado = None
            for nome_item in player["itens"]:
                if item_input == nome_item.casefold():
                    item_encontrado = nome_item
                    break
            
            if item_encontrado and player["itens"][item_encontrado] > 0:

                player["inimigo_precisao_reduzida"] = True # reduz a chance de acerto 50%

                if item_encontrado == "po√ß√£o de cura":
                    player["vida"] += 20
                    player["itens"][item_encontrado] -= 1
                    rprint("Voc√™ usou [blue]po√ß√£o de cura[/] e recuperou 20 de vida\n")
                elif item_encontrado == "po√ß√£o de for√ßa":
                    player["for√ßa"] += 10
                    player["itens"][item_encontrado] -= 1
                    rprint("Voc√™ usou [blue]po√ß√£o de for√ßa[/] e aumentou 10 de for√ßa\n")
                elif item_encontrado == "po√ß√£o de defesa":
                    player["defesa"] += 20
                    player["itens"][item_encontrado] -= 1
                    rprint("Voc√™ usou [blue]po√ß√£o de defesa[/] e aumentou 20 de defesa\n")
                elif item_encontrado == "sangue de drag√£o":
                    player["vida"] += 50
                    player["itens"][item_encontrado] -= 1
                    rprint("Voc√™ usou [blue]sangue de drag√£o[/] e recuperou 50 de vida\n")
                elif item_encontrado == "vigor do vulc√£o":
                    player["for√ßa"] += 30
                    player["itens"][item_encontrado] -= 1
                    rprint("Voc√™ usou [blue]po√ß√£o de cura[/] e aumentou 30 de for√ßa\n")
                elif item_encontrado == "sangue da montanha":
                    player["defesa"] += 30
                    player["itens"][item_encontrado] -= 1
                    rprint("Voc√™ usou [blue]sangue da montanha[/] e aumentou 30 de defesa\n")
                elif item_encontrado == "lagrimas de cura":
                    player["vida"] += 60
                    player["for√ßa"] -= 20
                    player["itens"][item_encontrado] -= 1
                    rprint("Voc√™ usou [blue]lagrimas de cura[/] e recuperou 60 de vida e perdeu 20 de for√ßa\n")
            else:
                rprint("[yellow]Voc√™ n√£o possui item ou digitou algo incorretamente[/]")
                turno_perdido = True
                continue

        elif acao == "3":
            if player.get("habilidade_usada", False):
                rprint("[yellow]Voc√™ j√° usou sua habilidade neste combate![/]")
                turno_perdido = True
                continue
            
            derrotados_habilidade = habilidade_especial(player, inimigos)
            derrotados.extend(derrotados_habilidade)
            player["habilidade_usada"] = True

        else:
            rprint("[red]A√ß√£o inv√°lida![/]")
            turno_perdido = True
            continue

        # Ataque do inimigo ap√≥s a√ß√£o v√°lida do jogador
        if not turno_perdido and inimigos:
            monstro = random.choice(inimigos)

            if player.get("inimigo_precisao_reduzida", False):
                precisao_inimigo = 50  # Precis√£o do inimigo ao acertar o ataque de 50%
                rprint(f"\n[bold yellow]{monstro['nome']} errou o ataque![/]\n")
                del player["inimigo_precisao_reduzida"]
            else:
                precisao_inimigo = 85 # Precis√£o do inimigo ao acertar o ataque de 15%
                if random.randint(1, 100) > precisao_inimigo:
                    rprint(f"\n[bold yellow]{monstro['nome']} errou o ataque![/]")
                else:
                    dano_monstro = max(1, monstro["for√ßa"] - (player["defesa"] // 2))  # Garante pelo menos 1 de dano
                    player["vida"] -= dano_monstro
                    rprint(f"\n[red]{monstro['nome']}[/] atacou causando [bold red]{dano_monstro}[/] de dano!\n")

                    if player["vida"] <= 0:
                        tocar_game()
                        rprint(Panel.fit("[bold red]‚ò† VOC√ä FOI DERROTADO! ‚ò†[/]", style="red"))
                        input("\nPressione ENTER para continuar...")
                        parar_game()
                        return False

    # Vit√≥ria
    rprint(Panel.fit("[bold green]VIT√ìRIA![/] Todos os inimigos foram derrotados!", style="green"))
    xp_total = sum([inimigo.get("nivel", 1) * 30 for inimigo in derrotados])
    ganhar_xp(player, xp_total)

    # Restaura√ß√£o dos atributos do Monarca
    if player["classe"] == "Monarca das Sombras" and "for√ßa_original" in player:
        if player.get("bonus_monarca", False):
            player["for√ßa"] = player["for√ßa_original"]
            player["vida"] = player["vida_original"]
        rprint("\n[purple]O poder das sombras se dissipa...[/]")
        rprint(f"| For√ßa voltou para [red]{player['for√ßa']}[/]")
        rprint(f"| Vida voltou para [green]{player['vida']}[/]\n")
        del player["bonus_monarca"]

        if not player.get("bonus_monarca", False):
            del player["for√ßa_original"]
            del player["vida_original"]

    return True